#!/usr/bin/env python

"""
 * file plotting
 * brief Plots the data storaged in a rosbag and in a yaml files with same name
 * author Bianca Lento & Andrea Gotelli
 * version 0.1
 * date 19/06/2020
 *
 * \param[in]
 *
 * Subscribes to: <BR>
 *
 *
 * Publishes to: <BR>
 *
 *
 * Description
            This file takes the data from a rosbag and a yaml file with the same name
        and plots the results in some graphs. The aim is to make clear the behaviour of
        the estimator throught various plots. The language that has been chosen is
        python as it is the best when dealing with data analisys.

            Moreover, the toolbox of PyQtGraph has been chose as it guarantees
        fluid but very accurate plots. It is not built-in in Ubuntu, so it needs to
        be installed following the proper tutorial (see the README file).

            In the beginning of this script, with the filename (and related path)
        passed as argument, the relevant data of the yaml file are loaded.
        Additionally, some ranged loops take all the desired messages from the
        rosbag of interest. The choice was to define a specific loop for every
        topic of interest. One could say that it is possible to take different
        topic from a single loop. However, this single loop will be executed several
        times, one for each topic, so the two approach take the same amount of time.

            Some classes are used to simplify collecting the data from the rosbag
        and to carry it around the code. Often, each reading has its own istance of
        the time. This repetion comes from the need of ensuring vectors of qual
        sizes no matter of the lenght or characteristic of the simulation.

            Once all the messages have been saved in the program, the motionless
        parts will be deleted, in order to focus the attention only in the results
        when the robot is moving.

            Once the data is prepared, the Qt Console is started and the plot
        are displayed. The script prepares the following windows:

        1)  A table with the parameters that have been used and the estimation
            results

        2)  A plot showing a tiled ground (which for practise is composed by black
            tiles separeted by white lines, it is simply more convenient to use
            this layout, as black Background improves the visualization. Moreover,
            the system could also work with black tiles and white line if some
            Change are done in the sensor at low level). The plots shows the following:
            *   The real path in green
            *   The path computed with the odometry only, in red
            *   The trajectory that the estimator has computed, in blue.
            *   The accepted measurements as medium blue dots
            *   The rejected measurements as small red dots
            *   The line that has been estimated of being detected as dashed yellow line

            This window also has a plot showing the Mahalanobis distances, using the same
            relation for dot type for the accepted/rejected measurements. It is useful to
            compare the distances with the threshold.

        3)  The third window shows the error between the estimated and real path. Additionally
            is shows the interval of +-3 sigma for each component of the state vector.
            Moreover, it also has a functionality of zooming in the selected area of a plot.

        4)  The fourth window has three plots with the evolutio of the sigmas for each
            component of the state vector

        5)  The last window shows the velocities for the robot. In the context of a simulation
            it is possible to compare the velocity tat the robot really has, with the velocity
            that has beed estimated.

 *
"""

# importing modules, ROS related stuff and multithreading
from __future__ import division #   Need for having floating number as result of a division of
                                #   integers. To be disable when using python3
import rospy
import rosbag
import sys
import yaml
from pyqtgraph.Qt import QtGui, QtCore
import numpy as np
import pyqtgraph as pg
from tf.transformations import euler_from_quaternion






if __name__ == '__main__':

    rospy.init_node('plotting')

#################################~  COLLECTING DATA ~###################################

    #   Load from yaml file the parameters
    with file( sys.argv[1] + '.yaml' ) as setting:
        parameters = yaml.load( setting )

    #   Obatin world parameters
    xSpacing            =   parameters['sensor']['x_spacing']
    ySpacing            =   parameters['sensor']['y_spacing']
    lineThickness       =   parameters['sensor']['line_thickness']

     #   Obatin robot parameters
    wheelRadius         =   parameters['robot_2_0']['wheel_radius']
    frontAxle           =   parameters['robot_2_0']['a']
    wheelRadiusError    =   parameters['robot_2_0']['wheel_1_error']
    trackGaugeError     =   parameters['robot_2_0']['track_gauge_error']
    encodersResolution  =   parameters['robot_2_0']['encoders_resolution']

    xInit               =   parameters['robot_2_0']['x_init']
    yInit               =   parameters['robot_2_0']['y_init']
    thetaInit           =   parameters['robot_2_0']['theta_init']


    #   Obtain estimator setting
    sigmaTuning         =   parameters['estimator']['sigma_tuning']
    threshold           =   parameters['estimator']['threshold']
    xScost              =   parameters['estimator']['x_scost']
    yScost              =   parameters['estimator']['y_scost']
    thetaRot            =   parameters['estimator']['theta_rot']



    #   Open the required bag file
    bag = rosbag.Bag( sys.argv[1] + '.bag' )


    class Pose:
        def __init__(self, x, y, theta, time):
            self.x = x
            self.y = y
            self.theta = theta
            self.time = time


    #   Obatin the real path that the robot has followed
    realPosture = []
    for topic, robot, t in bag.read_messages(topics=['/RobotPosture']):
        orientation_q = robot.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, yaw) = euler_from_quaternion (orientation_list)
        realPosture.append( Pose( robot.position.x, robot.position.y, yaw, t.to_sec() ) )


    #   Obtain an estimation of the path odometry based
    odometryPosture = []
    for topic, odom, t in bag.read_messages(topics=['/RobotOdometry']):
        orientation_q = odom.pose.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, yaw) = euler_from_quaternion( orientation_list )
        odometryPosture.append( Pose(odom.pose.pose.position.x, odom.pose.pose.position.y, yaw, t.to_sec()))


    #   Obtain the path that the estimator has computed
    class Estim:
        def __init__(self, x, y, theta, time, x_var, y_var, theta_var):
            self.x = x
            self.y = y
            self.theta = theta
            self.time = time
            self.x_var = x_var
            self.y_var = y_var
            self.theta_var = theta_var

    estimatedPosture = []
    for topic, estm, t in bag.read_messages(topics=['/EstimatedPosture']):
        orientation_q = estm.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, yaw) = euler_from_quaternion (orientation_list)
        estimatedPosture.append( Estim( estm.pose.position.x,  estm.pose.position.y, yaw, t.to_sec(), estm.covariance[6*0 + 0], estm.covariance[6*1 + 1], estm.covariance[6*5 + 5] ) )


    #   Obtain information about the measurements
    class Measurement:
        def __init__(self, time, mh_dist, status, x, y):
            self.time = float(time)
            self.mh_dist = float(mh_dist)
            self.accepted = bool( status )
            self.x = float( x )
            self.y = float( y )

    processedMeasurements = []
    lines_detected = []
    prev_h = -1000
    prev_v = -1000
    for topic, meas, t in bag.read_messages(topics=['/Measurements']):

        processedMeasurements.append( Measurement(  t.to_sec(),
                                                    meas.distance,
                                                    meas.accepted,
                                                    meas.pose.position.x,
                                                    meas.pose.position.y) )

        if meas.accepted:

            if meas.line_type == 'HORIZONTAL':

                if meas.line_index != prev_h:
                    prev_v = -1000
                    pos = [[meas.pose.position.x - xSpacing/2, meas.pose.position.x + xSpacing/2], [meas.line_index, meas.line_index]]
                    lines_detected.append(pos)
                    prev_h = meas.line_index
            else:
                if meas.line_index != prev_v:
                    prev_h = -1000
                    pos = [[meas.line_index, meas.line_index], [meas.pose.position.y - ySpacing/2, meas.pose.position.y + ySpacing/2]]
                    lines_detected.append(pos)
                    prev_v = meas.line_index

    class RobotTwist:
        def __init__(self, linear, angular, time):
            self.linear = linear
            self.angular = angular
            self.time = time

    #   Obtain the input velocities from simulation
    realTwist = []
    for topic, vel_real, t in bag.read_messages(topics=['/RobotVelocities']):
        realTwist.append( RobotTwist(vel_real.linear.x, vel_real.angular.z, t.to_sec()) )


    #   Obtain the input velocities from estimation
    estimatedTwist = []
    for topic, vel_estm, t in bag.read_messages(topics=['/EstimatedVelocities']):
        estimatedTwist.append( RobotTwist(vel_estm.linear.x, vel_estm.angular.z, t.to_sec()) )



    #   No need of the bag file anymore
    bag.close()


#################################~  PREPOCESS DATA ~###################################

    #   Skip motionless initial part if any
    nbSamples = len( np.asarray( realPosture ) )
    i = 0
    while (i<nbSamples) and (realPosture[i].x-realPosture[i+1].x==0) and (realPosture[i].x-realPosture[i+1].x==0):
        i = i+1

    startIndex = i
    #   Skip motionless final part if any
    i = -1
    while (i> -nbSamples) and (realPosture[i].x-realPosture[i-1].x==0) and (realPosture[i].x-realPosture[i-1].x==0):
        i = i-1

    stopIndex = i

    #   Extract relevant data by removing motionless parts
    del realPosture[0: startIndex]
    del realTwist[0: startIndex]


    del realPosture[stopIndex: -1]
    del realTwist[stopIndex: -1]

    #   Skip motionless initial part if any
    nbSamples = len( np.asarray( realPosture ) )
    i = 0
    while (i<nbSamples) and (realPosture[i].x-realPosture[i+1].x==0) and (realPosture[i].x-realPosture[i+1].x==0):
        i = i+1

    startIndex = i
    #   Skip motionless final part if any
    i = -1
    while (i> -nbSamples) and (realPosture[i].x-realPosture[i-1].x==0) and (realPosture[i].x-realPosture[i-1].x==0):
        i = i-1

    stopIndex = i

    #   Extract relevant data by removing motionless parts
    del realPosture[0: startIndex]
    del realTwist[0: startIndex]


    del realPosture[stopIndex: -1]
    del realTwist[stopIndex: -1]


    #   Comute overall length of the path
    pathLenght = 0
    for index in range(1, len(realPosture)):
        pathLenght += np.sqrt( (np.power(realPosture[index].x - realPosture[index-1].x, 2)) + (np.power(realPosture[index].y - realPosture[index-1].y, 2)))




    #   Skip motionless initial part if any
    nbSamples = len( np.asarray( estimatedPosture ) )
    i = 0
    while (i<nbSamples) and (estimatedPosture[i].x-estimatedPosture[i+1].x==0) and (estimatedPosture[i].x-estimatedPosture[i+1].x==0):
        i = i+1

    startIndex = i
    #   Skip motionless final part if any
    i = -1
    while (i> -nbSamples) and (estimatedPosture[i].x-estimatedPosture[i-1].x==0) and (estimatedPosture[i].x-estimatedPosture[i-1].x==0):
        i = i-1

    stopIndex = i

    #   Extract relevant data by removing motionless parts
    del estimatedTwist[0: startIndex]
    del estimatedTwist[stopIndex: -1]


    del estimatedPosture[0: startIndex]
    del estimatedPosture[stopIndex: -1]

    del odometryPosture[0: startIndex]
    del odometryPosture[stopIndex: -1]


    # Normalize measurement time
    initial = processedMeasurements[0].time
    for meas in processedMeasurements:
        meas.time = meas.time - initial

    # Normalize real time
    initial = realPosture[0].time
    for realpose in realPosture:
        realpose.time = realpose.time - initial

    # Normalize estimated time
    initial = estimatedPosture[0].time
    for estmpose in estimatedPosture:
        estmpose.time = estmpose.time - initial

    # Normalize odometry time
    initial = odometryPosture[0].time
    for odompose in odometryPosture:
        odompose.time = odompose.time - initial

    # Normalize odometry time
    initial = estimatedTwist[0].time
    for twist in estimatedTwist:
        twist.time = twist.time - initial

    # Normalize odometry time
    initial = realTwist[0].time
    for twist in realTwist:
        twist.time = twist.time - initial



    #   For comparing the two postures, the last estimated posture is compared to the
    #   current (and real) robot posture
    starting = 0
    errorPose = []
    for pose in realPosture:
        for index in range(starting,  len(estimatedPosture)):
            if estimatedPosture[index].time > pose.time:
                errorPose.append( Pose( pose.x - estimatedPosture[index - 1].x,
                                        pose.y - estimatedPosture[index - 1].y,
                                        pose.theta - estimatedPosture[index - 1].theta,
                                        estimatedPosture[index - 1].time))

                break
        starting = index -1

#################################~  PLOTTING DATA ~###################################



    #   Start the console
    app = QtGui.QApplication([])


    #  Create the fifth window with velocities

    win5 = pg.GraphicsWindow(title="Velocities")
    win5.resize(1000,600)
    win5.setWindowTitle('Velocities')

    estimatedTwist_time     = [estm.time for estm in estimatedTwist]
    estimatedTwist_linear   = [estm.linear for estm in estimatedTwist]
    estimatedTwist_angular  = [estm.angular for estm in estimatedTwist]

    realTwist_time      = [real.time for real in realTwist]
    realTwist_linear    = [real.linear for real in realTwist]
    realTwist_angular   = [real.angular for real in realTwist]

    p12 = win5.addPlot(title="Linear Velocity")
    p12.addLegend()

    #   Change Background for readability
    p12.legend.setBrush(pg.mkBrush(200, 200, 200, 150))
    p12.legend.setLabelTextColor(pg.mkColor(0, 0, 0))

    p12.plot( estimatedTwist_time, estimatedTwist_linear, pen=(255,0,0), name="Estimated linear velocity")
    p12.plot( realTwist_time, realTwist_linear, pen=pg.mkPen('b', width=4), name="Real linear velocity")
    p12.setLabel('left', "Linear velocity", units='m/s')
    p12.setLabel('bottom', "time", units='s')

    win5.nextRow()

    p13 = win5.addPlot(title="Angular Velocity")
    p13.addLegend()

    #   Change Background for readability
    p13.legend.setBrush(pg.mkBrush(200, 200, 200, 150))
    p13.legend.setLabelTextColor(pg.mkColor(0, 0, 0))

    p13.plot( estimatedTwist_time, estimatedTwist_angular, pen=(255,0,0), name="Estimated angular velocity")
    p13.plot( realTwist_time, realTwist_angular, pen=pg.mkPen('b', width=4), name="Real angular velocity")
    p13.setLabel('left', "Angular velocity", units='RAD/s')
    p13.setLabel('bottom', "time", units='s')




    #  Create the fourth window with standard deviations
    win4 = pg.GraphicsWindow(title="Standard deviations of x, y and theta")
    win4.resize(1000,600)
    win4.setWindowTitle('Standard deviations of x, y and theta')

    # Defining parameters to plot
    x_var = [estm.x_var for estm in estimatedPosture]
    y_var = [estm.y_var for estm in estimatedPosture]
    theta_var = [estm.theta_var for estm in estimatedPosture]
    time_estm = [estm.time for estm in estimatedPosture]



    p9 = win4.addPlot(title="Standard deviation of x")
    p9.plot(time_estm, np.sqrt(x_var), pen=(255,0,0), name="sigma X")
    p9.setLabel('left', "sigma x", units='m')
    p9.setLabel('bottom', "time", units='s')

    win4.nextRow()

    p10 = win4.addPlot(title="Standard deviation of y")
    p10.plot(time_estm, np.sqrt(y_var), pen=(255,0,0), name="sigma Y")
    p10.setLabel('left', "sigma y", units='m')
    p10.setLabel('bottom', "time", units='s')

    win4.nextRow()

    p11 = win4.addPlot(title="Standard deviation of theta")
    p11.plot(time_estm, np.sqrt(theta_var)*180/np.pi, pen=(255,0,0), name="sigma Theta")
    p11.setLabel('left', "sigma theta", units='')
    p11.setLabel('bottom', "time", units='s')



    #   Create the third window with the errors
    win3 = pg.GraphicsWindow(title="Errors along x, y and in heading")
    win3.resize(1000,600)
    win3.setWindowTitle('Errors along x, y and in heading')


    # Defining parameters to plot
    x_error = [error.x for error in errorPose]
    y_error = [error.y for error in errorPose]
    theta_error = [error.theta for error in errorPose]
    time_error = [error.time for error in errorPose]

    p3 = win3.addPlot(title="Error in x")
    p3.addLegend()

    #   Change Background for readability
    p3.legend.setBrush(pg.mkBrush(200, 200, 200, 150))
    p3.legend.setLabelTextColor(pg.mkColor(0, 0, 0))

    p3.plot(time_estm,  3*np.sqrt(x_var), pen=(255,0,0), name="+-3 sigmaX")
    p3.plot(time_error, x_error, pen=(0,0,255), name="Error X")
    p3.plot(time_estm,  -3*np.sqrt(x_var), pen=(255,0,0))
    p3.setLabel('left', "x", units='m')
    p3.setLabel('bottom', "time", units='s')
    lr_1 = pg.LinearRegionItem([0,2])
    #lr_1.setZValue(-0.01)
    p3.addItem(lr_1)

    p4 = win3.addPlot(title="Zoom on selected region")
    p4.plot(time_estm,  3*np.sqrt(x_var), pen=(255,0,0), name="+-3 sigmaX")
    p4.plot(time_error, x_error, pen=(0,0,255), name="Error X")
    p4.plot(time_estm,  -3*np.sqrt(x_var), pen=(255,0,0))
    p4.setLabel('left', "y", units='m')
    def updatePlot():
        p4.setXRange(*lr_1.getRegion(), padding=0)
        p4.setYRange(-0.03, 0.03)
    def updateRegion():
        lr_1.setRegion(p4.getViewBox().viewRange()[0])
    lr_1.sigRegionChanged.connect(updatePlot)
    p4.sigXRangeChanged.connect(updateRegion)
    updatePlot()

    win3.nextRow()

    p5 = win3.addPlot(title="Error in y")
    p5.addLegend()

    #   Change Background for readability
    p5.legend.setBrush(pg.mkBrush(200, 200, 200, 150))
    p5.legend.setLabelTextColor(pg.mkColor(0, 0, 0))

    p5.plot(time_estm,  3*np.sqrt(y_var), pen=(255,0,0), name="+-3 sigmaY")
    p5.plot(time_error, y_error, pen=(0,0,255), name="Error Y")
    p5.plot(time_estm,  -3*np.sqrt(y_var), pen=(255,0,0))
    p5.setLabel('left', "y", units='m')
    p5.setLabel('bottom', "time", units='s')
    lr_2 = pg.LinearRegionItem([0,2])
    #lr.setZValue(-10)
    p5.addItem(lr_2)

    p6 = win3.addPlot(title="Zoom on selected region")
    p6.plot(time_estm,  3*np.sqrt(y_var), pen=(255,0,0), name="+-3 sigmaY")
    p6.plot(time_error, y_error, pen=(0,0,255), name="Error Y")
    p6.plot(time_estm,  -3*np.sqrt(y_var), pen=(255,0,0))
    p6.setLabel('left', "y", units='m')
    def updatePlot():
        p6.setXRange(*lr_2.getRegion(), padding=0)
        p6.setYRange(-0.03, 0.03)
    def updateRegion():
        lr_2.setRegion(p6.getViewBox().viewRange()[0])
    lr_2.sigRegionChanged.connect(updatePlot)
    p6.sigXRangeChanged.connect(updateRegion)
    updatePlot()

    win3.nextRow()

    p7 = win3.addPlot(title="Error in theta")
    p7.addLegend()

    #   Change Background for readability
    p7.legend.setBrush(pg.mkBrush(200, 200, 200, 150))
    p7.legend.setLabelTextColor(pg.mkColor(0, 0, 0))

    p7.plot(time_estm,  (3*180/np.pi)*np.sqrt(theta_var), pen=(255,0,0), name="+-3 sigmaTheta")
    p7.plot(time_error, theta_error, pen=(0,0,255), name="Error theta")
    p7.plot(time_estm,  -(3*180/np.pi)*np.sqrt(theta_var), pen=(255,0,0))
    p7.setLabel('left', "theta", units='rad')
    p7.setLabel('bottom', "time", units='s')
    lr_3 = pg.LinearRegionItem([0,2])
    #lr.setZValue(-10)
    p7.addItem(lr_3)

    p8 = win3.addPlot(title="Zoom on selected region")
    p8.plot(time_estm,  (3*180/np.pi)*np.sqrt(theta_var), pen=(255,0,0), name="+-3 sigmaTheta")
    p8.plot(time_error, theta_error, pen=(0,0,255), name="Error theta")
    p8.plot(time_estm,  -(3*180/np.pi)*np.sqrt(theta_var), pen=(255,0,0))
    p8.setLabel('left', "y", units='grad')
    def updatePlot():
        p8.setXRange(*lr_3.getRegion(), padding=0)
        p8.setYRange(-5, 5)
    def updateRegion():
        lr_3.setRegion(p8.getViewBox().viewRange()[0])
    lr_3.sigRegionChanged.connect(updatePlot)
    p8.sigXRangeChanged.connect(updateRegion)
    updatePlot()

    #   Create the second window with paths and distances
    win2 = pg.GraphicsWindow(title="Trajectories, measurements and distances")
    win2.resize(1000,600)
    win2.setWindowTitle('Trajectories, measurements and distances')

    # Defining parameters to plot
    x_real = [real.x for real in realPosture]
    y_real = [real.y for real in realPosture]

    x_odom = [odom.x for odom in odometryPosture]
    y_odom = [odom.y for odom in odometryPosture]

    x_estm = [estm.x for estm in estimatedPosture]
    y_estm = [estm.y for estm in estimatedPosture]

    t_meas= [m.time for m in processedMeasurements]
    mh_dist = [m.mh_dist for m in processedMeasurements]

    #   Enable antialiasing for prettier plots
    pg.setConfigOptions(antialias=True)

    #   Create first plot containing the trajectories of robot, odometry
    #   and estimator
    p1 = win2.addPlot(title="Trajectories")
    p1.addLegend()

    #   Change Background for readability
    p1.legend.setBrush(pg.mkBrush(200, 200, 200, 150))
    p1.legend.setLabelTextColor(pg.mkColor(0, 0, 0))

    p1.plot(x_real, y_real, pen=pg.mkPen('g', width=4), name="Real path")
    p1.plot(x_odom, y_odom, pen=pg.mkPen('r', width=4), name="Odometry path")
    p1.plot(x_estm, y_estm, pen=pg.mkPen('b', width=4), name="Estimated path")


    red = pg.mkBrush('r')
    blue = pg.mkBrush('b')
    brushes = [blue if m.accepted else red for m in processedMeasurements]
    sizes = [10 if m.accepted else 5 for m in processedMeasurements]
    x_meas = [m.x for m in processedMeasurements]
    y_meas = [m.y for m in processedMeasurements]

    #   Count the number of rejected measurements
    rejectedMeasurements = 0
    for measurement in processedMeasurements:
        if not measurement.accepted:
            rejectedMeasurements = rejectedMeasurements + 1

    #   Obtain a percentage of the rejected measurements
    rejectedPercentage = float(rejectedMeasurements / len(processedMeasurements))*100

    p1.plot(x_meas, y_meas, pen=None, symbolSize=sizes, symbolBrush=brushes)

    #   Create a PlotDataItem to be displayed in the lagend
    acp = pg.PlotDataItem([0], [0], pen=None, symbolSize=10, symbolBrush=pg.mkBrush('b'))
    rjt = pg.PlotDataItem([0], [0], pen=None, symbolSize=5, symbolBrush=pg.mkBrush('r'))
    stm = pg.PlotDataItem([0], [0], pen=pg.mkPen('y', width=3, style=QtCore.Qt.DashLine))
    p1.legend.addItem(acp, "Accepted measurement")
    p1.legend.addItem(rjt, "Rejected measurement")
    p1.legend.addItem(stm, "Estimated line")


    for line in lines_detected:
        p1.plot(line[0], line[1], pen=pg.mkPen('y', width=3, style=QtCore.Qt.DashLine))


    p1.setLabel('left', "Y Axis", units='m')
    p1.setLabel('bottom', "X Axis", units='m')
    #   Plot the lines in a 10x10 world as in rviz
    for a in range( int(5/xSpacing) ):
        p1.plot([a*xSpacing, a*xSpacing], [-5, 5], pen=(150, 150, 150))
        p1.plot([-a*xSpacing, -a*xSpacing], [-5, 5], pen=(150, 150, 150))

    for b in range( int(5/ySpacing) ):
        p1.plot([-5, 5], [b*ySpacing, b*ySpacing], pen=(150, 150, 150))
        p1.plot([-5, 5], [-b*ySpacing, -b*ySpacing], pen=(150, 150, 150))

    p1.showGrid(x=True, y=True)

    #   Create a second plot with the Mahalanobis distances
    p2 = win2.addPlot(title="Mahalanobis distances")
    #p2.setLogMode(False, True)
    p2.plot([processedMeasurements[0].time , processedMeasurements[-1].time], [threshold, threshold], pen=pg.mkPen('r', width=2), name="Threshold")

    p2.setLabel('left', "x", units='undimensional distances')
    p2.setLabel('bottom', "time", units='s')
    p2.plot(t_meas, mh_dist, pen=None, symbolSize=sizes, symbolBrush=brushes)


    #   Create the first window with a table of the setting of the parameters
    win1 = pg.TableWidget(sortable=False)
    win1.show()
    win1.resize(430,650)
    win1.setWindowTitle('Table of Parameters')

    # Table of parameters
    data = np.array([
        ('WORLD PARAMETERS',        0.0,                        ""),
        ('x_spacing',               xSpacing,                   "[m]"),
        ('y_spacing',               ySpacing,                   "[m]"),
        ('line_thickness',          lineThickness,              "[m]"),
        ('ROBOT PARAMETERS',        0.0,                        ""),
        ('Wheel radius',            wheelRadius,                "[m]"),
        ('Track gauge',             2*frontAxle,                "[m]"),
        ('Initial position x',      xInit,                      "[m]"),
        ('Initial position y',      yInit,                      "[m]"),
        ('Initial position theta',  thetaInit,                  "[grad]"),
        ('ODOMETRY PARAMETERS',     0.0,                        ""),
        ('wheel_1_error',           (wheelRadiusError-1)*100,   "[%]"),
        ('track_gauge_error',       (trackGaugeError-1)*100,    "[%]"),
        ('encoders_resolution',     encodersResolution,         "[dots/revolution]"),
        ('ESTIMATOR PARAMETERS',    0.0,                        ""),
        ('sigma_tuning',            sigmaTuning,                ""),
        ('Threshold',               threshold,                  ""),
        ('Initial position x',      xInit + xScost,             "[m]"),
        ('Initial position y',      yInit + yScost,             "[m]"),
        ('Initial position theta',  thetaInit + thetaRot,       "[grad]"),
        ('ESTIMATION RESULTS',      0.0,                        ""),
        ('Rejected measurements',   rejectedMeasurements,       ""),
        ('Percentage of rejected',  rejectedPercentage,         "[%]"),
        ('Path lenght',             pathLenght,                 "[m]")
        ], dtype=[('Parameter', object), ('Value', float), ('Units', object)])


    win1.setData(data)



    QtGui.QApplication.instance().exec_()
