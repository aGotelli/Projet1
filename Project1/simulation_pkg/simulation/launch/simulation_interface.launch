<launch>

  <!-- The following is the table for a (2, 0) robot inspired from the MOBRO course
  ______________________________________________________________________________________
  | Wheel |   L   |  alpha  |   d   |   beta    |  gamma  |   phi   |      psi         |
  ______________________________________________________________________________________
  |  1f   |   a   | -M_PI/2 |   0   |    0      |  M_PI/2 | phi_1f  |       0          |
  |  2f   |   a   |  M_PI/2 |   0   |    0      | -M_PI/2 | phi_2f  |       0          |
  |  3c   |   b   |  M_PI   |   c   |  beta_3c  |    0    | phi_3c  | M_PI + beta_3c   |

  The user is allowed to change the length of the robot parts. But they should
  not try to change the angles and orientation of the robot as all the kinematic
  will change. Moreover, it does not make much sense to change the robot parts
  orientation (with respect to the moving platform frame)                    -->

  <!-- Parameters of wheels and related actuators -->
  <arg name="r"                   value="0.05"  />    <!--  meters   -->
  <arg name="w_max"               value="10.0"  />    <!--   RAD/s   -->
  <arg name="encoders_resolution" value="120"   />    <!-- dots/wheel rotation -->
  <arg name="wheel_1_error"       value="1.03"  />    <!-- [percentage] -->
  <arg name="track_gauge_error"   value="1.01"  />    <!-- [percentage] -->

  <!-- Parameters of the robot overall geometry [in meters].
  The user is free to choose the values arbitrairly. However, the value of "c"
  should be left as an evaluation, this will allow to compute its value
  accordignly with the radius of the wheel.                                  -->
  <arg name="a" value="0.2"   />
  <arg name="b" value="0.4"   />
  <arg name="c" value="$(eval arg('r') + 0.05)"  />

  <!-- Initial posture for the robot -->
  <arg name="x_init"      value="0.106066" />  <!-- meters -->
  <arg name="y_init"      value="0.106066" />  <!-- meters -->
  <arg name="theta_init"  value="-135" />  <!-- grad -->

  <!-- Parameters of the world, i.e. the description of the lines. x_spacing and
  y_spacing represent the offset of the lines along x and y respectively.
  The line thickness should be chosen wisely. In fact, as in the real life, a
  line too thin will no be detected by a sensor if the robot is too fast.
  Here the same rules apply, in order to not miss any measurement, the thinkness
  MUST BE GREATER than the maximum displacement of the robot at every iteration.
  The whole simulation runs a 150 Hz so the computation is quite trivial.
  In the default configuration with a radius of 0.05 m and a max speed of
  10 RAD/s the robot has a max velocity of 0.5 m/s. As a result, with the
  simulation frequency the dispacement is 0.0033 i.e. 3.33 mm.
  In other words, it is strongly recommended to use a line thikness
  proportionated at the robot parameters.  [all the parameters are in meters]-->
  <arg name="x_spacing"       value="0.25"     />
  <arg name="y_spacing"       value="0.25"     />
  <arg name="line_thickness"  value="0.005"   />


  <!-- Position of the sensors in the robot frame [in meters].
  As for the wheels the sensor numeration follows the same logic.
  In other words the sensor one is beside the wheel one ecc.                 -->
  <arg name="sensor_1_x" value="0.0"  />
  <arg name="sensor_1_y" value="-0.15" />

  <arg name="sensor_2_x" value="0.0" />
  <arg name="sensor_2_y" value="0.15" />


  <!-- Specify the file name and the folder where to save the files needed to
  recreate the simulation -->
  <arg name="file_name"   value="stod_two_meas" />
  <arg name="folder_name" value="observability_problem" />

  <!-- If the a joystick is available, it is possible to use it to control the
  robot. However it may be required to create anther adapet as the joystick
  output will be different from the one used. If no joystick is available,
  setting the value use_joystick to false will allow to use the keyboard to
  control the robot.
  The argument joystick tag is to be filled with the tag of the joystick in the
  computer. To check the name run "sudo ls /dev/input/"                      -->
  <arg name="use_joystick"  value="true" />
  <arg name="joystick_tag"  value="js1"   />
  <arg name="QWERTY"        value="true"  />


  <arg name="record" value="true" />


  <!-- Include the launch file which executes the simulations -->
  <include file="$(find simulation)/launch/simulation_setup.launch" pass_all_args="true">
  </include>



</launch>
