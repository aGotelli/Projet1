<launch>

  <!-- Select the folder where the user wants to put the estimator outputs file -->
  <arg name="save_into_folder"  value="processed_martedi"  />

  <!-- Select the name for the file containig the estimator outputs -->
  <arg name="save_as"           value="loop" />

  <!-- Select the simulation files to be loaded -->
  <arg name="file_name"         value="loop" />

  <!-- Select the folder containig the desired simulation file -->
  <arg name="take_from_folder"  value="recorded_data"   />

  <!-- Select the desired computation acceleration. This parameter increases the
  rate at which the rosbag publishes the data and the rate of the estimator
  accordingly.                                                               -->
  <arg name="speed_factor"    value="1" />

  <!-- This parameter allows to run the estimator at a frequency n-th times lower
  than the simulation frequency. In this way it is possible to test the
  simulation in worst conditions.                                            -->
  <arg name="subsample_rate"  value="1" />

  <arg name="threshold"     value="3.8415"   /><!-- chi2inv(0.95,1) = 3.8415 -->
  <arg name="sigma_tuning"  value="0.12"   />

  <!-- Assuming of being able to positioning the robot with a +- 2cm precision
        And with an orientation uncertainty of +-5 grad                      -->
  <arg name="sigma_x"       value="0.015"   />  <!--  [m]    -->
  <arg name="sigma_y"       value="0.015"   />  <!--  [m]    -->
  <arg name="sigma_theta"   value="8"   />  <!-- [grad]  -->



  <arg name="x_scost"       value="0.0"   />
  <arg name="y_scost"       value="0.0"   />
  <arg name="theta_rot"     value="0"   />

  <arg name="simulation_frame_rate" default="150" />

  <arg name="hz" default="$(eval arg('speed_factor')*arg('simulation_frame_rate') )"  />

  <arg name="estimator_freq" default="$(eval arg('speed_factor')*150/arg('subsample_rate') )"  />

  <param name="use_sim_time" value="true" />


  <rosparam command="load" file="$(find data)/$(arg take_from_folder)/$(arg file_name).yaml" />


  <node pkg="rosbag" type="play" name="playback_simulation" args="--delay=2
                                                                  --clock
                                                                  --hz=$(arg hz)
                                                                  --rate=$(arg speed_factor)
                                                                  $(find data)/$(arg take_from_folder)/$(arg file_name).bag"
                                                                  required="true">
    <remap from="/simulation/RobotPosture"    to="/RobotPosture"    />
    <remap from="/simulation/EncodersReading" to="/EncodersReading" />
    <remap from="/simulation/IRSensorsStatus" to="/IRSensorsStatus" />
    <remap from="/simulation/RobotOdometry"   to="/RobotOdometry"   />
  </node>

  <node pkg="estimator" type="estimator_estimator" name="estimator" output="screen" launch-prefix="valgrind --tool=callgrind --callgrind-out-file='callgrind.estimator.%p' ">
    <param name="threshold"                       value="$(arg threshold)"      />
    <param name="sigma_tuning"                    value="$(arg sigma_tuning)"   />
    <param name="estimator_frequency" type="int"  value="$(arg estimator_freq)" />
    <param name="sigma_x"                         value="$(arg sigma_x)"        />
    <param name="sigma_y"                         value="$(arg sigma_y)"        />
    <param name="sigma_theta"                     value="$(arg sigma_theta)"    />
    <param name="x_scost"                         value="$(arg x_scost)"        />
    <param name="y_scost"                         value="$(arg y_scost)"        />
    <param name="theta_rot"                       value="$(arg theta_rot)"    />
  </node>

  <!-- The node to save all the needed data -->
  <node pkg="simulation" type="simulation_file_handler" name="file_handler" args="$(find data)/$(arg save_into_folder)  $(arg save_as)" output="screen" >
    <param name="topics_to_save"  value="Mahalanobis EstimatedPosture Velocities Measurements RobotPosture RobotOdometry"      />
  </node>



</launch>
